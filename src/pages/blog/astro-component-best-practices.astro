---
import BlogLayout from "../../layouts/BlogLayout.astro";
import Card from "../../components/ui/Card.astro";
import SectionTitle from "../../components/ui/SectionTitle.astro";
import ServiceCard from "../../components/ui/ServiceCard.astro";
import AccordionItem from "../../components/ui/AccordionItem.astro";

// 导入图片资源
import icon4 from "../../assets/icon4.svg";
import icon5 from "../../assets/icon5.svg";
import icon6 from "../../assets/icon6.svg";

const blogData = {
  title: "Astro 组件开发最佳实践",
  pubDate: new Date("2024-01-18"),
  author: "Tech Team",
  authImage: "/blog/image1.png",
  image: "image1.png",
  tags: ["Astro", "开发", "组件"],
  summary: "学习如何创建可重用、高性能的 Astro 组件，提升开发效率和代码质量。",
  type: "Article"
};

// 最佳实践数据
const bestPractices = [
  {
    index: 1,
    titleTop: "组件",
    titleBottom: "可重用性",
    img: icon4,
    alt: "可重用组件图标",
    link: "#reusability"
  },
  {
    index: 2,
    titleTop: "性能",
    titleBottom: "优化策略",
    img: icon5,
    alt: "性能优化图标",
    link: "#performance"
  },
  {
    index: 3,
    titleTop: "类型",
    titleBottom: "安全保障",
    img: icon6,
    alt: "类型安全图标",
    link: "#type-safety"
  }
];

// 开发技巧数据
const developmentTips = [
  {
    index: 1,
    title: "Props 接口定义",
    description: "使用 TypeScript 接口定义组件 props，提供更好的开发体验和类型检查。确保所有必需的属性都有明确的类型定义。"
  },
  {
    index: 2,
    title: "默认值处理",
    description: "为组件 props 提供合理的默认值，使组件更容易使用。使用解构赋值和默认参数来简化代码。"
  },
  {
    index: 3,
    title: "样式封装",
    description: "使用 Astro 的 scoped styles 或 CSS modules 来避免样式冲突。保持组件样式的独立性和可维护性。"
  },
  {
    index: 4,
    title: "性能考虑",
    description: "合理使用客户端 JavaScript，优先考虑服务端渲染。只在必要时添加交互性，保持组件的轻量级特性。"
  },
  {
    index: 5,
    title: "文档编写",
    description: "为组件编写清晰的文档和使用示例。包括 props 说明、使用场景和注意事项，方便团队协作。"
  },
  {
    index: 6,
    title: "测试策略",
    description: "编写单元测试和集成测试来确保组件的稳定性。使用适当的测试工具和方法来验证组件功能。"
  }
];
---

<BlogLayout {...blogData}>
  <!-- 文章引言 -->
  <div class="mb-12">
    <p class="text-xl leading-relaxed text-dark font-light">
      Astro 作为现代前端框架，为我们提供了强大的组件化开发能力。
      本文将分享一些实用的最佳实践，帮助你创建更好的 Astro 组件。
    </p>
  </div>

  <!-- 核心概念部分 -->
  <div class="my-16">
    <SectionTitle 
      sectionTitle="核心开发理念" 
      description="掌握这些核心概念，让你的 Astro 组件开发更加高效"
    />
    
    <div class="grid md:grid-cols-2 lg:grid-cols-3 gap-8 mt-12">
      {bestPractices.map((practice) => (
        <ServiceCard {...practice} />
      ))}
    </div>
  </div>

  <!-- 详细内容 -->
  <div class="space-y-12">
    <h2 id="reusability">组件可重用性设计</h2>
    
    <p>
      可重用性是组件化开发的核心优势。一个设计良好的组件应该能够在不同的上下文中使用，
      而不需要修改其内部实现。
    </p>

    <!-- 代码示例 -->
    <Card isUnderline={true}>
      <div class="bg-slate-800 text-white p-6 rounded-[45px] border border-slate-600">
        <h4 class="text-white text-lg font-semibold mb-4">🔧 组件接口设计示例</h4>
        <pre class="text-emerald-300 text-sm overflow-x-auto bg-slate-900 p-4 rounded-lg font-mono leading-relaxed"><code>---
// 定义清晰的 Props 接口
export interface Props &#123;
  title: string;
  description?: string;
  variant?: 'primary' | 'secondary' | 'accent';
  size?: 'small' | 'medium' | 'large';
  isDisabled?: boolean;
  onClick?: () => void;
&#125;

// 提供默认值
const &#123;
  title,
  description = '',
  variant = 'primary',
  size = 'medium',
  isDisabled = false,
  onClick
&#125; = Astro.props;
---</code></pre>
      </div>
    </Card>

    <h2 id="performance">性能优化策略</h2>
    
    <p>
      Astro 的核心优势在于其"Islands Architecture"，允许我们选择性地添加交互性。
      理解何时使用客户端 JavaScript 是性能优化的关键。
    </p>

    <!-- 性能对比 -->
    <div class="grid md:grid-cols-2 gap-8 my-12">
      <Card isUnderline={true}>
        <div class="p-6 bg-background rounded-[45px] border border-accent">
          <h4 class="text-primary font-bold text-lg mb-4">⚡ 性能优化技巧</h4>
          <ul class="text-primary space-y-3">
            <li class="flex items-start gap-3">
              <span class="text-accent font-bold">•</span>
              <span>优先使用服务端渲染</span>
            </li>
            <li class="flex items-start gap-3">
              <span class="text-accent font-bold">•</span>
              <span>按需加载客户端脚本</span>
            </li>
            <li class="flex items-start gap-3">
              <span class="text-accent font-bold">•</span>
              <span>使用 Astro 的内置优化</span>
            </li>
            <li class="flex items-start gap-3">
              <span class="text-accent font-bold">•</span>
              <span>合理使用图片优化</span>
            </li>
          </ul>
        </div>
      </Card>
      
      <Card isUnderline={true}>
        <div class="p-6 bg-gray rounded-[45px] border border-primary">
          <h4 class="text-primary font-bold text-lg mb-4">📊 性能指标</h4>
          <div class="space-y-3">
            <div class="flex justify-between items-center">
              <span class="text-dark">首屏加载时间</span>
              <span class="bg-accent px-3 py-1 rounded-full text-sm font-medium text-white">&lt; 1s</span>
            </div>
            <div class="flex justify-between items-center">
              <span class="text-dark">JavaScript 包大小</span>
              <span class="bg-accent px-3 py-1 rounded-full text-sm font-medium text-white">&lt; 50KB</span>
            </div>
            <div class="flex justify-between items-center">
              <span class="text-dark">Lighthouse 分数</span>
              <span class="bg-accent px-3 py-1 rounded-full text-sm font-medium text-white">> 95</span>
            </div>
          </div>
        </div>
      </Card>
    </div>

    <!-- 客户端交互示例 -->
    <Card isUnderline={true}>
      <div class="bg-slate-800 text-white p-6 rounded-[45px] border border-slate-600">
        <h4 class="text-white text-lg font-semibold mb-4">🎯 客户端交互示例</h4>
        <pre class="text-emerald-300 text-sm overflow-x-auto bg-slate-900 p-4 rounded-lg font-mono leading-relaxed"><code>---
// 只在需要时添加客户端指令
---

&lt;button class="interactive-button" data-action="toggle"&gt;
  点击我
&lt;/button&gt;

&lt;script&gt;
  // 轻量级的客户端脚本
  document.addEventListener('DOMContentLoaded', () =&gt; &#123;
    const buttons = document.querySelectorAll('[data-action="toggle"]');
    buttons.forEach(button =&gt; &#123;
      button.addEventListener('click', () =&gt; &#123;
        button.classList.toggle('active');
      &#125;);
    &#125;);
  &#125;);
&lt;/script&gt;</code></pre>
      </div>
    </Card>

    <h2 id="type-safety">类型安全保障</h2>
    
    <p>
      TypeScript 为 Astro 组件提供了强大的类型检查能力，帮助我们在开发阶段发现潜在问题，
      提高代码质量和维护性。
    </p>

    <!-- TypeScript 示例 -->
    <Card isUnderline={true}>
      <div class="bg-indigo-50 p-6 rounded-[45px] border-l-4 border-indigo-500">
        <h4 class="text-indigo-800 font-bold text-lg mb-4">💡 TypeScript 最佳实践</h4>
        <ul class="text-indigo-700 space-y-2">
          <li>• 为所有 props 定义明确的类型</li>
          <li>• 使用联合类型限制可选值</li>
          <li>• 利用泛型提高组件灵活性</li>
          <li>• 配置严格的 TypeScript 规则</li>
        </ul>
      </div>
    </Card>
  </div>

  <!-- 开发技巧部分 -->
  <div class="my-16">
    <SectionTitle 
      sectionTitle="实用开发技巧" 
      description="这些技巧将帮助你更高效地开发 Astro 组件"
    />
    
    <div class="mt-12 space-y-4">
      {developmentTips.map((tip) => (
        <AccordionItem
          index={tip.index}
          title={tip.title}
          description={tip.description}
        />
      ))}
    </div>
  </div>

  <!-- 实际案例部分 -->
  <div class="my-16">
    <h2>实际案例：创建一个通用卡片组件</h2>
    
    <p>
      让我们通过一个实际案例来演示如何应用这些最佳实践。我们将创建一个灵活、
      可重用的卡片组件。
    </p>

    <Card isUnderline={true}>
      <div class="bg-slate-800 text-white p-6 rounded-[45px] border border-slate-600">
        <h4 class="text-white text-lg font-semibold mb-4">📝 完整组件示例</h4>
        <pre class="text-emerald-300 text-sm overflow-x-auto bg-slate-900 p-4 rounded-lg font-mono leading-relaxed"><code>---
// UniversalCard.astro
export interface Props &#123;
  title: string;
  description?: string;
  imageUrl?: string;
  variant?: 'default' | 'featured' | 'minimal';
  hasAction?: boolean;
  actionText?: string;
  actionUrl?: string;
&#125;

const &#123;
  title,
  description,
  imageUrl,
  variant = 'default',
  hasAction = false,
  actionText = '了解更多',
  actionUrl = '#'
&#125; = Astro.props;

const cardClasses = &#123;
  default: 'bg-white border border-gray-200',
  featured: 'bg-gradient-to-br from-blue-50 to-indigo-100 border-2 border-blue-200',
  minimal: 'bg-transparent'
&#125;;
---

&lt;div class=&#123;`rounded-[45px] p-6 $&#123;cardClasses[variant]&#125; shadow-lg hover:shadow-xl transition-shadow`&#125;&gt;
  &#123;imageUrl && (
    &lt;img src=&#123;imageUrl&#125; alt=&#123;title&#125; class="w-full h-48 object-cover rounded-lg mb-4" /&gt;
  )&#125;
  
  &lt;h3 class="text-xl font-bold text-primary mb-2"&gt;&#123;title&#125;&lt;/h3&gt;
  &#123;description && (
    &lt;p class="text-dark mb-4"&gt;&#123;description&#125;&lt;/p&gt;
  )&#125;
  
  &lt;slot /&gt;
  
  &#123;hasAction && (
    &lt;a href=&#123;actionUrl&#125; class="inline-block bg-accent text-white px-4 py-2 rounded-lg hover:bg-opacity-90 transition-colors"&gt;
      &#123;actionText&#125;
    &lt;/a&gt;
  )&#125;
&lt;/div&gt;</code></pre>
      </div>
    </Card>
  </div>

  <!-- 总结部分 -->
  <div class="my-16">
    <Card isUnderline={true}>
      <div class="p-8 bg-gradient-to-r from-background to-gray rounded-[45px] text-center border border-accent">
        <h3 class="text-3xl font-bold text-primary mb-6">🎯 总结</h3>
        <p class="text-lg text-dark mb-6 leading-relaxed">
          Astro 组件开发的最佳实践是一个持续学习的过程。
          通过遵循这些原则，我们可以构建出高性能、可维护的现代网站。
          记住，好的组件不仅要功能完善，更要易于理解和扩展。
        </p>
        <div class="flex flex-col sm:flex-row gap-4 justify-center">
          <button class="bg-accent text-white px-8 py-3 rounded-full font-semibold hover:bg-opacity-90 transition-colors interactive-btn">
            查看更多示例
          </button>
          <button class="border-2 border-accent text-accent px-8 py-3 rounded-full font-semibold hover:bg-accent hover:text-white transition-colors interactive-btn">
            加入讨论
          </button>
        </div>
      </div>
    </Card>
  </div>

</BlogLayout>

<style>
  .interactive-btn {
    transform: scale(1);
    transition: transform 0.2s ease;
  }
  
  .interactive-btn:hover {
    transform: scale(1.05);
  }
  
  .interactive-btn:active {
    transform: scale(0.95);
  }
</style>

<script>
  const handleButtonClick = function(this: HTMLButtonElement, e: MouseEvent) {
    e.preventDefault();
    
    // 创建涟漪效果
    const ripple = document.createElement('span');
    const rect = this.getBoundingClientRect();
    const size = Math.max(rect.width, rect.height);
    const x = e.clientX - rect.left - size / 2;
    const y = e.clientY - rect.top - size / 2;
    
    ripple.style.width = ripple.style.height = size + 'px';
    ripple.style.left = x + 'px';
    ripple.style.top = y + 'px';
    ripple.classList.add('ripple');
    
    this.appendChild(ripple);
    
    setTimeout(() => {
      ripple.remove();
    }, 600);
    
    // 模拟页面跳转或操作
    setTimeout(() => {
      alert('功能演示：' + this.textContent);
    }, 200);
  };

  document.addEventListener('DOMContentLoaded', function() {
    // 添加按钮交互效果
    document.querySelectorAll('.interactive-btn').forEach(button => {
      button.addEventListener('click', handleButtonClick as (this: HTMLButtonElement, ev: Event) => any);
    });

    console.log('Astro 组件最佳实践文章已加载！');
  });
</script>

<style is:global>
  .ripple {
    position: absolute;
    border-radius: 50%;
    background: rgba(255, 255, 255, 0.6);
    transform: scale(0);
    animation: ripple-animation 0.6s linear;
    pointer-events: none;
  }
  
  @keyframes ripple-animation {
    to {
      transform: scale(4);
      opacity: 0;
    }
  }
</style>